generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Booking       Booking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Booking {
  id       String   @id @default(cuid())
  userId   String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  status   String
  amount   Decimal
  currency String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model Transaction {
//   id                String     @id @default(cuid())
//   createdAt         DateTime   @default(now())
//   updatedAt         DateTime   @updatedAt
//   grandTotal        Decimal
//   paymentSuccessful Boolean    @default(false)
//   user              User?      @relation(fields: [userId], references: [id])
//   userId            String?
//   itinerary         Itinerary? @relation(fields: [itineraryId], references: [id])
//   itineraryId       String?
// }

// model User {
//   id           String        @id @default(cuid())
//   email        String        @unique
//   givenName    String?
//   familyName   String?
//   postalCode   String?
//   address      String?
//   city         String?
//   country      String?
//   countryCode  String?
//   createdAt    DateTime      @default(now())
//   updatedAt    DateTime      @updatedAt
//   transactions Transaction[]
//   itineraries  Itinerary[]
// }

// model Itinerary {
//   id                   String                   @id @default(cuid())
//   departure            FlightDepartureSegment[]
//   departureId          String?
//   arrival              FlightArrivalSegment[]
//   arrivalId            String?
//   oneWay               Boolean                  @default(false)
//   duration             String
//   carrierCode          String
//   carrierAircraftType  String
//   operatingCarrierCode String
//   User                 User?                    @relation(fields: [userId], references: [id])
//   userId               String?
//   Transaction          Transaction[]
// }

// model FlightDepartureSegment {
//   id                String     @id @default(cuid())
//   departureAt       DateTime
//   departureIataCode String
//   departureTerminal String
//   Itinerary         Itinerary? @relation(fields: [itineraryId], references: [id])
//   itineraryId       String?
// }

// model FlightArrivalSegment {
//   id              String     @id @default(cuid())
//   arrivalAt       DateTime
//   arrivalIataCode String
//   arrivalTerminal String
//   Itinerary       Itinerary? @relation(fields: [itineraryId], references: [id])
//   itineraryId     String?
// }
